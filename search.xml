<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arduino 学习笔记</title>
      <link href="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="初识-Arduino"><a href="#初识-Arduino" class="headerlink" title="初识 Arduino"></a>初识 Arduino</h1><h2 id="Arduino是什么"><a href="#Arduino是什么" class="headerlink" title="Arduino是什么"></a>Arduino是什么</h2><p>Arduino是一款便捷灵活、方便上手的开源电子原型平台。<br>包含硬件 (各种型号的Arduino板)和软件(ArduinolDE)两个部分。是由一个意大利的一个开发团队于2005年冬季开发。</p><p><strong>值得注意的是，Arduino是完全开源的</strong></p><h2 id="Arduino能做什么"><a href="#Arduino能做什么" class="headerlink" title="Arduino能做什么"></a>Arduino能做什么</h2><p>爱好者及开发者可以使用Arduino与一些计算机软件以及一些电子硬件模块结合，快速作出具有智能互动电子作品。<br>例如智能机器人 、智能避障循迹小车 、物联网电子设计、仿真机械等、智能家居、智慧农业…..</p><h2 id="Arduino特点"><a href="#Arduino特点" class="headerlink" title="Arduino特点"></a>Arduino特点</h2><ul><li><p><strong>跨平台</strong></p><p>ArduinoIDE可以在Windows、Macintosh OS(Mac OS)、Linux三大主流操作系统上运行，而其他的大多数控制器只能在Windows上开发。</p></li><li><p><strong>易上手</strong></p><p>Arduino IDE是基于c&#x2F;c++语言并对AVR相关参数函数化，即使不了解底层原理，简单学习之后，你也可以迅速的开发出令人惊艳的智能电子作品。</p></li><li><p><strong>开放性</strong></p><p>Arduino的硬件原理图、电路图、IDE软件及核心库文件都是开源的，在开源协议范围内里可以任意修改原始设计及相应代码。</p></li><li><p><strong>发展迅速</strong></p><p>Arduino不仅仅是全球最流行的开源硬件，也是一个优秀的硬件开发平台，简单的开发方式使得开发者更关注创意与实现，更快的完成自己的项目开发，大大节约了学习的成本，缩短了开发的周期。</p></li></ul><p><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230428210611966.png" alt="image-20230428210611966"></p><hr><h1 id="Aeduino开发板介绍"><a href="#Aeduino开发板介绍" class="headerlink" title="Aeduino开发板介绍"></a>Aeduino开发板介绍</h1><h2 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h2><p><strong>什么是单片机？</strong></p><ul><li>单芯片微型计算机，简称单片机</li><li>单片机是一种集成电路芯片，是一个小而完善的微型计算机系</li><li>微控制器</li><li>接收数据、处理数据、反馈数据</li><li>通过执行载入的程序进行工作</li><li>通过各种I&#x2F;O (input&#x2F;output) 口与外部设备连接</li><li><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230428211118996.png" alt="image-20230428211118996" style="zoom:50%;"></li></ul><h2 id="常见三款Arduino开发板"><a href="#常见三款Arduino开发板" class="headerlink" title="常见三款Arduino开发板"></a>常见三款Arduino开发板</h2><ul><li><strong>Arduino Uno</strong><ul><li><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230506134651672.png" alt="image-20230506134651672"></li></ul></li><li><strong>Arduino Nano</strong><ul><li><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230506140621447.png" alt="image-20230506140621447"></li></ul></li><li><strong>Arduino Mega 2560</strong><ul><li><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230506140648372.png" alt="image-20230506140648372"></li></ul></li></ul><hr><ul><li>Arduino UNO R3 开发板详解<ul><li><img src="/2023/04/28/Arduino%E5%9F%BA%E7%A1%80/image-20230506140955419.png" alt="image-20230506140955419"></li><li><em>Arduino Uno开发板就是一款基于单片机 ATmega328P的微控制器板</em></li></ul></li></ul><h1 id="Aeduino使用语言及编译器"><a href="#Aeduino使用语言及编译器" class="headerlink" title="Aeduino使用语言及编译器"></a>Aeduino使用语言及编译器</h1><h2 id="Arduino语言"><a href="#Arduino语言" class="headerlink" title="Arduino语言"></a>Arduino语言</h2><p><strong>C&#x2F;C++语言</strong></p><ul><li>以<strong>C语言为基础语法</strong>，把AVR单片机相关的一些参数设置都函数化</li><li>拥有丰富的核心库和扩展库，有面向对象思想</li><li>因此Arduino程序是基于两种语言混合编写而成</li><li><strong>特点：简单易入门、功能强大</strong></li></ul><h2 id="Arduino编译器"><a href="#Arduino编译器" class="headerlink" title="Arduino编译器"></a>Arduino编译器</h2><ul><li><a href="https://www.arduino.cc/en/software">Arduino IDE</a></li><li>编写Arduino语言</li><li>把Arduino语言翻译成单片机可以理解的语言</li><li>上传程序到开发板</li></ul><h1 id="Arduino语言基础"><a href="#Arduino语言基础" class="headerlink" title="Arduino语言基础"></a>Arduino语言基础</h1><h2 id="基础框架"><a href="#基础框架" class="headerlink" title="基础框架"></a>基础框架</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span>&#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    语句体……;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化函数：<code>void setup()&#123;&#125;</code></strong></p><ul><li>在整个程序执行过程中只会运行一次</li><li>一般用于程序内一些函数、变量、常量等的初始化设置</li></ul><p><strong>循环函数：<code>void loop()&#123;&#125;</code></strong></p><ul><li>在整个程序执行过程中会循环运行</li><li>既在开发板通电或复位后首先执行void setup(){ }里面的函数体，然后接着执行void loop(){ }里面的函数体，最后会一遍又一遍的执行void loop(){ }中的函数体直到断电或再次复位</li></ul><p><strong>在使用Arduino时即使以后用不到void setup(){ }和void loop(){ }两个函数也不可删掉，否则会报错</strong></p><h2 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h2><p>delay(value);</p><p>pinMode(pin,value);</p><p>digitalWrite(pin,value);</p><p>diaitaRead(pin);</p><p>Serial</p><p>王家伟大刷币</p>]]></content>
      
      
      <categories>
          
          <category> Arduino </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 操作系统</title>
      <link href="/2022/10/24/ROS%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/10/24/ROS%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS简介"><a href="#ROS简介" class="headerlink" title="ROS简介"></a>ROS简介</h1><h2 id="ROS概念"><a href="#ROS概念" class="headerlink" title="ROS概念"></a>ROS概念</h2><p><strong>ROS全称Robot Operating System(机器人操作系统)</strong></p><ul><li>ROS是适用于机器人的<strong>开源</strong>元操作系统</li><li>ROS集成了大量的工具，库，协议，提供类似OS所提供的功能，简化对机器人的控制</li><li>还提供了用于在<strong>多台计算机</strong>上获取，构建，编写和运行代码的工具和库，ROS在某些方面类似于“机器人框架”</li><li>ROS设计者将ROS表述为“ROS &#x3D; Plumbing + Tools + Capabilities + Ecosystem”，即ROS是通讯机制、工具软件包、机器人高层技能以及机器人生态系统的集合体</li></ul><p><img src="http://www.autolabor.com.cn/book/ROSTutorials/assets/05ROS%E7%AE%80%E4%BB%8B.png"></p>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> ROS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语言笔记</title>
      <link href="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言概述"><a href="#C-语言概述" class="headerlink" title="C 语言概述"></a>C 语言概述</h1><h2 id="什么是程序"><a href="#什么是程序" class="headerlink" title="什么是程序"></a>什么是程序</h2><p><strong>程序</strong>：为了让计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello,world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是-C语言"><a href="#什么是-C语言" class="headerlink" title="什么是 C语言"></a>什么是 C语言</h2><p>C语言是一门面向过程的计算机编程语言，与C++、C#、Java等面向对象编程语言有所不同。C语言的设计目标是提供一种能以简易的方式编译、处理低级存储器、仅产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。</p><p>1972 年，为了移植与开发 UNIX 操作系统，<strong>丹尼斯·里奇</strong>在贝尔电话实验室设计开发了 C 语言。最新的C语言标准是<strong>C18</strong>。</p><h2 id="C语言特点"><a href="#C语言特点" class="headerlink" title="C语言特点"></a>C语言特点</h2><ol><li><strong>代码级别的跨平台</strong>：由于标准的存在，使得几乎同样的 C 代码可用于多种操作系统，如 Windows、DOS、UNIX 等等；也适用于多种机型</li><li><strong>使允许直接访问物理地址，对硬件进行操作</strong>: 由于 C 语言允许直接访问物理地址，可以直接对硬件进行操作， 因此它既具有高级语言的功能，又具有低级语言的许多功能，C 语言可用来写系统软件(比如操作系统, 数据库, 杀毒软件，防火墙, 驱动， 服务器程序)</li><li>C 语言是一个有<strong>结构化程序设计</strong>、具有<strong>变量作用域</strong>（variable scope）以及<strong>递归功能</strong>的过程式语言 </li><li>C 语言传递参数可以是<strong>值传递</strong>（pass by value，值），也可以<strong>传递指针</strong>（a pointer passed by value， 地址）</li><li>C 语言中，<strong>没有对象</strong>，不同的变量类型可以用结构体（struct）组合在一起</li><li><strong>预编译处理</strong>（preprocessor）, 生成目标<strong>代码质量高</strong>，程序<strong>执行效率高</strong></li></ol><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p><strong>Visual Studio</strong>：<a href="https://visualstudio.microsoft.com/zh-hans/vs/">https://visualstudio.microsoft.com/zh-hans/vs/</a></p><p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/Visual_Studio_2022.png"></p><h2 id="B-x2F-S-和C-x2F-S-架构的定义和区别"><a href="#B-x2F-S-和C-x2F-S-架构的定义和区别" class="headerlink" title="B&#x2F;S 和C&#x2F;S 架构的定义和区别"></a>B&#x2F;S 和C&#x2F;S 架构的定义和区别</h2><p><strong>B&#x2F;S</strong> 架构软件</p><p><strong>B&#x2F;S（Browser-Server）</strong>浏览器和服务器架构。 (比如百度、微博、淘宝等网站)</p><p>包含客户端浏览器、web应用服务器、数据库服务器的软件系统。用户只需要一个浏览器就可以访问服务。</p><p><strong>系统更新时候，只需要更新服务端，不需要更新浏览器</strong> 。</p><p><strong>C&#x2F;S</strong> 架构软件</p><p><strong>C&#x2F;S（Client-Server）</strong>客户机和服务器结构。(比如微信、王者荣耀手游，QQ音乐等软件)。</p><p>C&#x2F;S结构与B&#x2F;S最显著的区别是需要安装客户端，通过客户端程序来访问应用系统。</p><p><strong>系统更新时，既要更新服务端，也要更新客户端。</strong></p><h2 id="C程序快速开发"><a href="#C程序快速开发" class="headerlink" title="C程序快速开发"></a>C程序快速开发</h2><p>创建C程序，输出“Hello，world！”</p><p>开发步骤</p><ul><li><p>Visual Studio 创建空项目 </p></li><li><p>新建源文件 hello.c</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void main()&#123;</span><br><span class="line">printf(&quot;Hello,world!&quot;);</span><br><span class="line">getchar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击  执行（不调试） 按钮运行程序</p></li><li><p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/C%E7%A8%8B%E5%BA%8F%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91.png"></p></li></ul><h1 id="C-程序运行机制"><a href="#C-程序运行机制" class="headerlink" title="C 程序运行机制"></a>C 程序运行机制</h1><h3 id="运行机制简述"><a href="#运行机制简述" class="headerlink" title="运行机制简述"></a>运行机制简述</h3><ol><li><strong>编辑：</strong>编写 hello.c  源代码</li><li><strong>编译：</strong>将 hello.c 程序 翻译成 目标文件（hello.obj）&#x2F;&#x2F;在计算机底层执行</li><li><strong>链接：</strong>将目标文件 hello.obj + 库文件 生成可执行文件 .exe  &#x2F;&#x2F;在计算机底层执行</li><li><strong>运行：</strong>执行 .exe 文件，得到运行结果</li></ol> <img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/C程序运行机制.png" style="zoom:80%;"> <h3 id="编译、链接和运行详解"><a href="#编译、链接和运行详解" class="headerlink" title="编译、链接和运行详解"></a>编译、链接和运行详解</h3><p><strong>什么是编译</strong></p><ul><li>将 <strong>C源文件</strong> 通过 <strong>编译器</strong> 将其编辑成 <strong>.obj文件</strong>（目标文件）</li></ul><p><strong>什么是链接</strong></p><ul><li>将<strong>目标文件（.obj文件）</strong>，通过 <strong>链接程序</strong> 与 <strong>C库文件</strong> 链接成 <strong>.exe（可执行文件）</strong></li></ul><p><strong>什么是运行</strong></p><ul><li>可执行的exe文件，也称为可执行程序（二进制文件）</li><li>在控制台下可以直接运行 exe 文件</li></ul><h3 id="开发注意事项"><a href="#开发注意事项" class="headerlink" title="开发注意事项"></a>开发注意事项</h3><ol><li><p>C程序的主体结构说明</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;   <span class="comment">// &#123;&#125;内包括内容，称为函数体</span></span><br><span class="line">语句<span class="number">1</span>；</span><br><span class="line">语句<span class="number">2</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>C程序源文件以 “<code>.c</code>” 为扩展名</p></li><li><p><strong>main()函数</strong> 是c程序的执行入口</p></li><li><p>C 语言 <strong>严格区分大小写</strong></p></li><li><p>C 程序 由许多条语句构成，每个语句以 “ <code>;</code> ” 结束</p></li><li><p>大小括号都是 <strong>成对</strong> 出现，缺一不可</p></li><li><p>修改源文件后，需要重新编译链接，生成新的exe文件后，才能生效</p></li></ol><h1 id="C-语言代码规范"><a href="#C-语言代码规范" class="headerlink" title="C 语言代码规范"></a>C 语言代码规范</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong>单行注释</strong></p><ul><li>基本格式<ul><li>格式：<code>//注释文字</code></li></ul></li></ul><p><strong>多行注释</strong> (块注释)</p><ul><li>基本格式<ul><li>格式：<code>/* 注释文字 */</code></li><li>多行注释不允许嵌套</li></ul></li></ul><h2 id="代码缩进风格"><a href="#代码缩进风格" class="headerlink" title="代码缩进风格"></a>代码缩进风格</h2><p>行尾风格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次行风格</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-语言标准库"><a href="#C-语言标准库" class="headerlink" title="C 语言标准库"></a>C 语言标准库</h1><blockquote><p>C 标准库是一组 C 内置函数、常量和头文件，比如 &lt;stdio.h&gt;、&lt;stdlib.h&gt;、&lt;math.h&gt;，等等。这个标准库可以作为 C 程序员的参考手册。</p></blockquote><p>参考手册：<a href="https://www.runoob.com/cprogramming/c-standard-library.html">https://www.runoob.com/cprogramming/c-standard-library.html</a></p><h1 id="C-转义字符"><a href="#C-转义字符" class="headerlink" title="Ｃ 转义字符"></a>Ｃ 转义字符</h1><p>C <strong>常用转义字符</strong></p><table><thead><tr><th>转义字符</th><th>释义</th></tr></thead><tbody><tr><td>\t</td><td>TAB（水平制表符），一个制表位，实现对其功能</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\\</td><td>一个 \</td></tr><tr><td>\“</td><td>一个 “</td></tr><tr><td>\‘</td><td>一个 ‘</td></tr><tr><td>\r</td><td>CR（回车），一个回车</td></tr></tbody></table><h1 id="C-占位符"><a href="#C-占位符" class="headerlink" title="C 占位符"></a>C 占位符</h1><table><thead><tr><th>占位符</th><th>数据显示类型</th><th>来源单词</th></tr></thead><tbody><tr><td>%d</td><td>有符号整数</td><td>digit</td></tr><tr><td>%f（%.2f）</td><td>浮点数</td><td>float</td></tr><tr><td>%c</td><td>字符</td><td>character</td></tr><tr><td>%s</td><td>字符串</td><td>string</td></tr></tbody></table><blockquote><p><a href="https://www.runoob.com/cprogramming/c-function-printf.html">C 占位符</a></p></blockquote><h1 id="C-变量"><a href="#C-变量" class="headerlink" title="Ｃ 变量"></a>Ｃ 变量</h1><blockquote><p>C 变量概念：</p><p>变量其实只不过是 <code>程序可操作的存储区(内存)</code> 的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p><p><strong>变量三要素（变量名称+数据类型+值）</strong></p><p>C 变量注意事项：</p><p>变量名称 可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的， C 严格区分大小写。 </p><p>变量必须<strong>先声明，后使用</strong></p><p>变量数据可以在<strong>数据类型范围内</strong>不断变化</p><p>变量在同一个作用域内不能重名</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> num;  <span class="comment">// 定义变量类型 int </span></span><br><span class="line">num = <span class="number">2</span>;  <span class="comment">// 给变量赋值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>,num);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num_2 = <span class="number">2</span>;  <span class="comment">//  定义一个名为 num_2 的 整型变量 并赋值 2 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-变量数据类型"><a href="#C-变量数据类型" class="headerlink" title="C 变量数据类型"></a>C 变量数据类型</h2><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221216222202935.png" alt="image-20221216222202935" style="zoom: 80%;"><blockquote><p>在 C 中，没有字符串类型，使用字符数组表述字符串</p></blockquote><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><blockquote><p>整型使用细节：</p><p>各种类型的存储大小与操作系统、系统位数和编译器有关，目前以64位系统为主。</p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/32-64.jpg" alt="img" style="zoom: 45%;"><p>C 语言的整型类型，分为<code>有符号 signed</code> 和 <code>无符号 unsigned</code> 两种，默认是 <code>signed</code>。</p><p><strong>byte</strong>(字节)：计算机中基本储存单元；<strong>bit</strong>(位)：计算机中的最小储存单元。 1byte &#x3D; 8 bit </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);<span class="comment">// 表达式 sizeof(type) 得到对象或类型的存储字节大小。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int 字节大小 = %lu \n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">// 输出 int 字节大小 = 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><blockquote><p>浮点型使用细节：</p><p>浮点型默认为 double 型，声明 float 型常量时，须后面加 ‘f’ 或 ‘F’。</p><p>通常情况下，应该使用 double 型，更加精准。</p><p>printf(“d1 &#x3D; %f”, d1); &#x2F;&#x2F; %f 在输出时默认保留小数点6位(%.6f)。</p></blockquote><blockquote><p>浮点型两种表示方式：</p><p>​十进制数形式：例 5.12512.0f.512(必须有小数点)</p><p>​科学计数形式：例 5.12e25.12E-2</p></blockquote><h3 id="字符类型-char"><a href="#字符类型-char" class="headerlink" title="字符类型(char)"></a>字符类型(char)</h3><blockquote><p>字符类型可以表示<strong>单个字符</strong>,字符类型是 <code>char</code>，char 是 1 个字节(可以存字母或者数字)。</p><p>多个字符称为字符串，在 C 语言中 使用 <code>char 数组</code> 表示，数组不是基本数据类型，而是构造类型。</p></blockquote><blockquote><p>字符类型使用细节：</p><p>字符常量时用单引号<code>(&#39;&#39;)</code>括起来的单个字符。例 char c1 &#x3D; ‘a’;char c2 &#x3D; ‘1’;</p><p> char转义字符<code>&#39;\&#39;</code>。例 char c3 &#x3D; ‘\n’  &#x2F;&#x2F; ‘\n’ 表示换行符</p><p>C 中，char 的本质时一个整数，对应<code>ASCII码</code>的对应字符输出。</p><p>给char 赋值一个整数，会按照ASCII码对应字符输出。例 char c4 &#x3D; 97;  &#x2F;&#x2F; 输出 c4 &#x3D; a</p><p>char 类型相当一个整数，可以进行运算。</p></blockquote><blockquote><p>字符型 存储到 计算机中，需要将字符对应的码值（整数）找出来 </p><p>存储：字符’a’——&gt;码值 (97)——&gt;二进制 (1100001)——&gt;存储() </p><p>读取：二进制(1100001)——&gt;码值(97)——&gt; 字符’a’——&gt;读取(显示)</p></blockquote><p><strong>ASCII码</strong></p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221217225536703.png" alt="image-20221217225536703"><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221217225628820.png" alt="image-20221217225628820" style="zoom:89%;"><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><blockquote><p><code>bool</code> 表示<strong>布尔型变量</strong>,也就是逻辑型变量的定义符。</p><p>C 语言标准(C89)没有定义布尔类型，所以 C 语言判断真假时以 0 为假，非 0 为真。</p><p>bool 取值 false 和 true,<code>0 为 false</code>,<code>非 0 为 true</code>。</p><p>布尔类型常用在 <code>条件控制语句：if...</code>  和  <code>循环控制语句：while...</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOL int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TURE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">BOOL isok = TURE; <span class="comment">// 等价于 int isok = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isok) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>C99中提供了一个头文件 &lt;stdbool.h&gt; 定义了bool代表_Bool，true代表1，false代表0。只要导入 stdbool.h ，就能非常方便的操作布尔类型了。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line"> 5 &#123;</span><br><span class="line"> <span class="number">6</span>     <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"> <span class="number">7</span>     <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line"> <span class="number">8</span>     <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"> <span class="number">9</span>     <span class="type">int</span> num = n;</span><br><span class="line"><span class="number">10</span>     <span class="keyword">while</span>( !flag)&#123;</span><br><span class="line"><span class="number">11</span>         sum = sum * (num--);</span><br><span class="line"><span class="number">12</span>         <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="number">13</span>             flag = <span class="literal">true</span>;</span><br><span class="line"><span class="number">14</span>         &#125;</span><br><span class="line"><span class="number">15</span>     &#125;</span><br><span class="line"><span class="number">16</span>     <span class="built_in">printf</span>(<span class="string">&quot;%d value %d\n&quot;</span>, n, sum);                                     </span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">19</span> &#125;<span class="comment">// 输出结果 10 value 3628800</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><p><strong>自动类型转换</strong></p><blockquote><p>在 C 程序进行赋值或者运算时，<strong>精度小</strong>的类型自动转换为<strong>精度大</strong>的数据类型，就是自动类型转换。</p></blockquote><blockquote><p>数据类型按精度(容量)大小排序：</p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221218113144013.png" alt="数据类型按精度(容量)大小排序" style="zoom:80%;"><p>数据类型自动转换表规则：</p><p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221218113343903.png" alt="image-20221218113343903"></p></blockquote><ul><li>自动类型转换细节说明：<ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成 <strong><code>精度最大</code></strong> 的那种数据类型，然后再进行计算(例 short 型和 int 型运算时，先把short转成int型后在进行运算)。</li><li>若两种类型的字节数不同，转换成字节大的类型，若两种类型的字节数相同，且一个有符号，一种无符号，则转为<strong>无符号类型</strong>。</li><li>在赋值运算中，等号两边的数据类型不同时，<strong>右边</strong>类型将转换为<strong>左边</strong>类型，如果右边数据类型比左边的数据类型长时，将<strong>丢失</strong>一部分数据，会降低精度，丢失部分按<strong>四舍五入</strong>向前舍入。</li></ol></li></ul><p><strong>强制类型转换</strong>  </p><blockquote><p>将精度高的数据类型转换为精度小的数据类型,使用时加上 <strong><code>强制转换符()</code></strong> ,注意!!!可能造成精度降低或溢出.</p><p>强制类型转换格式;</p><p><strong><code>(类型名)表达式</code></strong>  例 int num &#x3D; (int)d1;</p><p>强制类型转换操作不改变操作数本身</p></blockquote><ul><li><p>强制类型转换细节说:</p><ol><li>当数据从 <strong><code>高精度 --&gt; 低精度</code></strong>,就需要使用强制转换 </li><li>强制转换符号只针对最近的表达式有效,往往会使用小括号提升优先级</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num4 = (<span class="type">int</span>)<span class="number">3.5</span> * <span class="number">10</span> + <span class="number">1.5</span> * <span class="number">6</span>;  <span class="comment">// 等价于 3 * 10 + 1.5 * 6  = 39 </span></span><br><span class="line"><span class="type">int</span> num5 = (<span class="type">int</span>)(<span class="number">3.5</span> * <span class="number">10</span> + <span class="number">1.5</span> * <span class="number">6</span>);  <span class="comment">// 使用小括号提升优先级 35 + 9 = 44</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="指针入门"><a href="#指针入门" class="headerlink" title="指针入门"></a>指针入门</h1><blockquote><p>基本介绍:</p><p>指针就是内存地址,每一个变量都有一个内存位置，每一个内存位置都定义了可使用 <code>&amp;</code> 运算符访问的地址，它表示了在内存中的一个地址。</p><p>输出变量地址使用:<strong><code>%p</code></strong>    例: <code>int num = 1; printf(&quot;num地址是:%p&quot;, &amp;num);</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span>* prt = &amp;num;</span><br><span class="line"><span class="comment">// int* prt;  int* 表示类型为 指针类型 名称 prt</span></span><br><span class="line"><span class="comment">// prt = &amp;num;  prt 指向一个 int 类型变量的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//说明1: 要输出一个变量的地址,使用 %p</span></span><br><span class="line"><span class="comment">//说明2: &amp;num 表示取出num这个变量的对应地址</span></span><br><span class="line">pintf(<span class="string">&quot;num = %d  num地址:%p&quot;</span>, num, &amp;num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量,本身也有地址 &amp;prt</span></span><br><span class="line"><span class="comment">//指针变量,存放的地址 prt</span></span><br><span class="line"><span class="comment">//指针变量,指向的值 *prt</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;prt的地址:%p prt存放的值:%p prt指向的值:%d&quot;</span>, &amp;prt, prt, *prt);</span><br></pre></td></tr></table></figure><blockquote><p>指针细节说明:</p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221218222508828.png" alt="image-20221218222508828" style="zoom:67%;"><ul><li><p>基本类型,都有对应的指针类型</p></li><li><p>指针的类型必须与变量的类型一致  (int类型对应int* ,float对应float….)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>    *ip;    <span class="comment">/* 一个整型的指针 */</span></span><br><span class="line"><span class="type">double</span> *dp;    <span class="comment">/* 一个 double 型的指针 */</span></span><br><span class="line"><span class="type">float</span>  *fp;    <span class="comment">/* 一个浮点型的指针 */</span></span><br><span class="line"><span class="type">char</span>   *ch;    <span class="comment">/* 一个字符型的指针 */</span></span><br></pre></td></tr></table></figure></li><li><p>其他类型指针:指向数组指针, 指向结构体的指针, 指向共用体的指针, (二级指针, 多级指针)</p></li></ul></blockquote><h1 id="值传递和地址传递"><a href="#值传递和地址传递" class="headerlink" title="值传递和地址传递"></a>值传递和地址传递</h1><blockquote><p>   C 语言传递参数(或者赋值)可以是**值传递(pass by value)<strong>，也可以是</strong>传递指针(a pointer passsed by value)**，传递指针也叫地址传递。</p><ol><li>默认<strong>传递值</strong>的类型：基本数据类型（整数类型、小数类型、字符类型），结构体，共用体。</li><li>默认<strong>传递地址</strong>的类型：指针、数组。</li></ol></blockquote><blockquote><p>值传递：将变量指向的存储内容，在传递&#x2F;赋值时，拷贝一份给接收变量。</p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221219140924459.png" alt="image-20221219140924459" style="zoom:67%;"><p>地址传递(指针传递)：如果是<strong>指针</strong>，就将指针变量存储的地址，传递给接收变量；如果是<strong>数组</strong>，就将数组的首地址传递给接收变量。</p><img src="/2022/10/19/C%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0/image-20221219150612406.png" alt="image-20221219150612406" style="zoom:60%;"></blockquote>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Ubuntu双系统的安装与卸载</title>
      <link href="/2022/10/17/Windows%E5%92%8CUbuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2022/10/17/Windows%E5%92%8CUbuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><ul><li>U盘一个（4G及以上容量 &#x2F; 提前备份好U盘里的资料，后续制作启动盘会格式化U盘）</li></ul></blockquote><blockquote><ul><li>Ubuntu系统镜像</li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/</a></li></ul></blockquote><blockquote><ul><li>Win32 Disk Imager<ul><li><a href="https://sourceforge.net/projects/win32diskimager/">https://sourceforge.net/projects/win32diskimager/</a></li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 学习笔记</title>
      <link href="/2022/04/26/HTML5%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/04/26/HTML5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="基础-网页格式"><a href="#基础-网页格式" class="headerlink" title="基础 网页格式"></a><strong>基础</strong> 网页格式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;!doctype html&gt;</code></td><td>文档类型声明标签</td><td>当前页面采用 HTML5 版本</td></tr><tr><td><code>&lt;html&gt;</code> <code>&lt;/html&gt;</code></td><td>根标签</td><td>页面中最大的标签（最基础的标签）</td></tr><tr><td><code>&lt;head&gt;</code> <code>&lt;/head&gt;</code></td><td>头部标签</td><td>在 head 标签中我们必须要设置 title 标签</td></tr><tr><td><code>&lt;title&gt;</code> <code>&lt;/title&gt;</code></td><td>标题标签</td><td>页面自己的网页标题</td></tr><tr><td><code>&lt;body&gt;</code> <code>&lt;/body&gt;</code></td><td>主体标签</td><td>包含文档的所有内容</td></tr></tbody></table><table><thead><tr><th>lang语言种类</th><th>定义当前网页显示的主语言，书写在 <html> 标签内</html></th></tr></thead><tbody><tr><td><code>en</code></td><td>定义语言为英语</td></tr><tr><td><code>zh</code></td><td>定义语言为中文</td></tr><tr><td><code>zh-CN</code></td><td>中文（简体，中国大陆）</td></tr></tbody></table><table><thead><tr><th>字符集</th><th><meta charset="UTF-8"></th></tr></thead></table><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>6个等级网页标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>  </p><p><code>&lt;h1&gt;</code> 定义最大的标题。 <code>&lt;h6&gt;</code> 定义最小的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h3><p><code>&lt;p&gt;</code> 标签用于定义段落，可以把 HTML 文档分割为若干段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;br&gt; </code>强制换行</p><p><code>&lt;hr&gt;</code>分割线标签 (不常用)</p><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><table><thead><tr><th>语义</th><th>标签</th></tr></thead><tbody><tr><td>加粗</td><td><code>&lt;strong&gt;</code> <code>&lt;/strong&gt;</code> 或 <code>&lt;b&gt;</code> <code>&lt;/b&gt;</code></td></tr><tr><td>倾斜</td><td><code>&lt;em&gt;</code> <code>&lt;/em&gt;</code> 或 <code>&lt;i&gt;</code> <code>&lt;/i&gt;</code></td></tr><tr><td>删除线</td><td><code>&lt;del&gt;</code> <code>&lt;/del&gt;</code> 或 <code>&lt;s&gt;</code> <code>&lt;/s&gt;</code></td></tr><tr><td>下划线</td><td><code>&lt;ins&gt;</code> <code>&lt;/ins&gt;</code> 或 <code>&lt;u&gt;</code> <code>&lt;/u&gt;</code></td></tr></tbody></table><h3 id="lt-div-gt-和-lt-span-gt-标签"><a href="#lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="&lt;div&gt;和&lt;span&gt;标签"></a>&lt;div&gt;和&lt;span&gt;标签</h3><table><thead><tr><th>标签</th><th>特点</th></tr></thead><tbody><tr><td><code>&lt;div&gt;</code> <code>&lt;/div&gt;</code></td><td>块级元素，一行只能放一个</td></tr><tr><td><code>&lt;span</code>&gt; <code>&lt;/span&gt;</code></td><td>行内元素，一行上可以放多个</td></tr></tbody></table><h3 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h3><h4 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h4><p><code>&lt;img&gt;</code> 标签用于定义 HTML 页面中的图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>src</code> 是 <code>&lt;img&gt;</code> 标签的必须属性，它用于指定图像文件的路径和文件名。</p><p>img其他属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>src</code></td><td>图片路径</td><td>必须属性</td></tr><tr><td><code>alt</code></td><td>文本</td><td>替换文本，图像显示失败时显示（为了提高 SEO 及适配屏幕阅读器，建议都把 alt 写上）</td></tr><tr><td><code>title</code></td><td>文本</td><td>提示文本，鼠标放到图片上，显示的提示文字</td></tr><tr><td><code>width</code></td><td>像素</td><td>设置图像的宽度（了解，后面通过 CSS 设置）</td></tr><tr><td><code>height</code></td><td>像素</td><td>设置图像的高度（了解，后面通过 CSS 设置）</td></tr><tr><td><code>border</code></td><td>像素</td><td>设置图像的边框粗细（了解，后面通过 CSS 设置）</td></tr></tbody></table></blockquote><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><ul><li>相对路径（常用）<ul><li>相对路径：以引用文件所在位置为参考基础，而建立出目录路径。</li></ul></li></ul><table><thead><tr><th>相对路径分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td><code>.</code></td><td>如：<code>&lt;img src=&quot;baidu.png&quot; /&gt;</code></td></tr><tr><td>下一级路径</td><td><code>/</code></td><td>如：<code>&lt;img src=&quot;image/baidu.png&quot; /&gt;</code></td></tr><tr><td>上一级路径</td><td><code>../</code></td><td>如：<code>&lt;img src=&quot;../image/baidu.png&quot; /&gt;</code></td></tr></tbody></table><ul><li><p>网络地址</p><ul><li><code>https://github.com/JERRY-Z-J-R/JERRY-Z-J-R/blob/main/mark-img/readme.gif</code></li></ul></li><li><p>绝对路径</p><ul><li><p>绝对路径：指目录下的绝对位置，直接到达目的位置，通常是从盘符开始的路径。</p></li><li><p>如 Windows 系统的绝对路径：<code>D:\web\img\logo.png</code></p></li></ul></li></ul><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a&gt;</code> 标签用于定义超链接，作用是从一个页面链接到另一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本、图像或其他内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>href</code></td><td>用于指定链接目标的 url 地址，（必须属性）当标签应用 href 属性时，它就具有了超链接的功能</td></tr><tr><td><code>target</code></td><td>用于指定链接页面的打开方式，其中 <code>_self</code> 在当前页面打开的方式（为默认值），<code>_blank</code> 在新窗口中打开的方式</td></tr></tbody></table><blockquote><p><strong>锚点链接：</strong>点击链接，可以快速定位到当前页面中的某个位置</p><ul><li>在链接文本的 href 属性中，设置属性值的 <code>#名字</code> 的形式，如：<code>&lt;a href=&quot;#two&quot;&gt;第2集&lt;/a&gt;</code></li><li>找到目标位置标签（此处以 h3 标签为例），里面添加一个 <code>id属性=&quot;刚才的名字&quot;</code>，如：<code>&lt;h3 id=&quot;two&quot;&gt;第2集介绍&lt;/h3&gt;</code></li><li><code>&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</code> 默认定位到页面顶部</li></ul></blockquote><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th align="left">特殊字符</th><th align="left">描述</th><th align="left">字符的代码</th></tr></thead><tbody><tr><td align="left"><code> </code></td><td align="left">空格符</td><td align="left"><code>&amp;nbsp;</code></td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">小于号</td><td align="left"><code>&amp;lt;</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于号</td><td align="left"><code>&amp;gt;</code></td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">和号</td><td align="left"><code>&amp;amp;</code></td></tr><tr><td align="left"><code>±</code></td><td align="left">正负号</td><td align="left"><code>&amp;plusmn;</code></td></tr><tr><td align="left"><code>×</code></td><td align="left">乘号</td><td align="left"><code>&amp;times;</code></td></tr><tr><td align="left"><code>÷</code></td><td align="left">除号</td><td align="left"><code>&amp;divide;</code></td></tr><tr><td align="left"><code>²</code></td><td align="left">上标</td><td align="left"><code>&amp;sup2;</code></td></tr></tbody></table><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><img src="https://s2.loli.net/2022/04/25/9l4GVx2hkeQbgjo.png"></p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;table&gt;</code> <code>&lt;/table&gt;</code> 是用于定义表格的标签</li><li><code>&lt;tr&gt;</code> <code>&lt;/tr&gt;</code> 用于定义表格中的行，必须嵌套在 <code>&lt;table&gt;</code> <code>&lt;/table&gt;</code> 标签中</li><li><code>&lt;td&gt;</code> <code>&lt;/td&gt;</code> 用于定义表格中的单元格，必须嵌套在 <code>&lt;tr&gt;</code> <code>&lt;/tr&gt;</code> 标签中</li><li><code>&lt;th&gt;</code> <code>&lt;/th&gt;</code> 标签表示 HTML 表格的表头部分，文本内容<strong>默认加粗居中</strong>显示。</li><li>字母 td 指表格数据（table data），即：数据单元格的内容</li><li>单元格 td 里面可以放任何的元素</li></ul><h4 id="表格结构"><a href="#表格结构" class="headerlink" title="表格结构"></a>表格结构</h4><ul><li><code>&lt;thead&gt;</code> <code>&lt;/thead&gt;</code>：用于定义表格的头部，推荐放置 <code>&lt;th&gt;</code> 标签</li><li><code>&lt;tbody&gt;</code> <code>&lt;/tbody&gt;</code>：用于定义表格的主体，主要用于放数据本体</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主体区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>zhou<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><blockquote><p>实际开发采用CSS设置</p></blockquote><table><thead><tr><th align="left">属性名</th><th align="left">属性值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>align</code></td><td align="left"><code>left</code>、<code>center</code>、<code>right</code></td><td align="left">规定表格相对周围元素的对齐方式（默认 left），注意指的是整个表格的对齐方式（表格是在父盒子中默认往左靠，还是居中或是往右靠），而不是指单元格内容的对齐方式（单元格内容对齐可以通过：<code>style=&quot;text-align: center;&quot;</code> 设置）（了解）</td></tr><tr><td align="left"><code>border</code></td><td align="left"><code>1</code> 或 <code>&quot;&quot;</code></td><td align="left">规定表格单元是否拥有边框，默认为 “”，表示没有边框（了解）</td></tr><tr><td align="left"><code>cellpadding</code></td><td align="left">像素值</td><td align="left">规定单元边沿与其内容之间的空白，默认 1 像素（了解）</td></tr><tr><td align="left"><code>cellspacing</code></td><td align="left">像素值</td><td align="left">规定单元格之间的空白，默认 2 像素（了解）</td></tr><tr><td align="left"><code>width</code></td><td align="left">像素值 或 百分比</td><td align="left">规定表格的宽度（了解）</td></tr><tr><td align="left"><code>height</code></td><td align="left">像素值 或 百分比</td><td align="left">规定表格的高度（了解）</td></tr></tbody></table><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p><strong>合并单元格的方式：</strong></p><ul><li>跨行合并（上下合并）：<code>rowspan=&quot;合并单元格的个数&quot;</code></li><li>跨列合并（左右合并）：<code>colspan=&quot;合并单元格的个数&quot;</code></li></ul><p><strong>目标单元格：（写合并代码）</strong></p><ul><li>跨行：最上侧单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><p><strong>合并单元格三步曲：</strong></p><ul><li>先确定是跨行还是跨列合并</li><li>找到目标单元格，写上 <code>合并方式=合并的单元格数量</code>，比如：<code>&lt;td colspan=&quot;2&quot;&gt;</code> <code>&lt;/td&gt;</code></li><li>删除多余单元格</li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><table><thead><tr><th align="left">标签名</th><th align="left">定义</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>&lt;ul&gt;</code> <code>&lt;/ul&gt;</code></td><td align="left">无序标签</td><td>里面<strong>只包含 li</strong>，没有顺序，使用较多，li 里面可以包含任何标签</td></tr><tr><td align="left"><code>&lt;ol&gt;</code> <code>&lt;/ol&gt;</code></td><td align="left">有序标签</td><td>里面<strong>只包含 li</strong>，有顺序，使用相对较少，li 里面可以包含任何标签</td></tr><tr><td align="left"><code>&lt;dl&gt;</code> <code>&lt;/dl&gt;</code></td><td align="left">自定义标签</td><td>里面<strong>只能包含 dt 和 dd</strong>，dt 和 dd 里面可以放任何标签，dd 一般作为对 dt 的细分描述</td></tr></tbody></table><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><p><code>&lt;form&gt;</code> 标签用于定义表单域，以实现用户信息的收集和传递。</p><p><code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 各种表单元素控件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><table><thead><tr><th>属性名</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td><code>action</code></td><td><code>url</code> 地址</td><td>用于指定接收并处理表单数据的服务器程序的 url 地址</td></tr><tr><td><code>method</code></td><td><code>get</code> &#x2F; <code>post</code></td><td>用于设置表单数据的提交方式，其取值为 get 或 post</td></tr><tr><td><code>name</code></td><td>名称</td><td>用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><blockquote><p><code>method=get</code> 将表单数据以名称&#x2F;值对的形式附加到 URL 中</p><p>GET 更适用于<strong>非安全</strong>数据，比如在 Google 中查询字符串</p></blockquote><blockquote><p><code>method=post</code> 将表单数据附加到 HTTP 请求的 body 内（数据不显示在 URL 中）</p></blockquote><h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><h5 id="lt-input-gt-表单元素"><a href="#lt-input-gt-表单元素" class="headerlink" title="&lt;input&gt;  表单元素"></a>&lt;input&gt;  表单元素</h5><p>在 <code>&lt;input&gt;</code> 标签中，包含一个 type 属性，根据不同的 type 属性值，输入字段拥有很多种形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>type 属性值：</strong></p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>button</code></td><td>定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）</td></tr><tr><td><code>checkbox</code></td><td>定义复选框，即：多选框，在一组多选中，要求它们必须拥有相同的 name</td></tr><tr><td><code>file</code></td><td>定义输入字段和 “浏览” 按钮，供文件上传</td></tr><tr><td><code>hidden</code></td><td>定义隐藏的输入字段</td></tr><tr><td><code>image</code></td><td>定义图像形式的提交按钮</td></tr><tr><td><code>password</code></td><td>定义密码字段，该字段中的字符被掩码</td></tr><tr><td><code>radio</code></td><td>定义单选按钮，在一组单选按钮中，要求它们必须拥有相同的 name</td></tr><tr><td><code>reset</code></td><td>定义重置按钮，重置按钮会清除表单中的所有数据</td></tr><tr><td><code>submit</code></td><td>定义提交按钮，提交按钮会把表单数据发送到服务器</td></tr><tr><td><code>text</code></td><td>定义单行的输入字段，用户可在其中输入文本，默认宽度为 20 个字符</td></tr></tbody></table><p><strong><code>&lt;input&gt;</code>其他属性</strong>：</p><table><thead><tr><th><strong>属性名</strong></th><th><strong>属性值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong><code>name</code></strong></td><td>由用户自定义</td><td>定义 input 元素的名称</td></tr><tr><td><strong><code>value</code></strong></td><td>由用户自定义</td><td>规定 input 元素的值，也就是提交到服务器的值</td></tr><tr><td><code>checked</code></td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td><code>maxlength</code></td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><p><strong>HTML5新增<code>&lt;input&gt;</code>属性：</strong></p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><strong>required</strong></td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td><strong>autocomplete</strong></td><td>on&#x2F;off</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。                                                                                                    默认开启此项，<code>autocomplete=&quot;on&quot;</code>开启，<code>autocomplete=&quot;off&quot;</code>关闭 。     需要在表单内同时加上<code>name</code> 属性，同时成功提交过</td></tr><tr><td>multiple</td><td>multiple</td><td>可以多选文件提交; 适用于<code>input</code>类型：<code>email</code> 和 <code>file</code></td></tr></tbody></table><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过以下设置方式修改placeholder里面字体颜色 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong><code>&lt;lable&gt;</code>标签</strong>：</p><p>标签用于绑定一个表单元素，当点击 <code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="lt-select-gt-表单元素"><a href="#lt-select-gt-表单元素" class="headerlink" title="&lt;select&gt; 表单元素"></a>&lt;select&gt; 表单元素</h5><p><code>&lt;select&gt;</code> 标签控件定义下拉列表，节约页面空间，多个选项让用户选择。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;select&gt;</code> 中至少包含一对 <code>&lt;option&gt;</code></p></li><li><p>在 <code>&lt;option&gt;</code> 中定义 <code>selected=&quot;selected&quot;</code> 时，当前项即为默认选中项</p></li></ul><h5 id="lt-textarea-gt-表单元素"><a href="#lt-textarea-gt-表单元素" class="headerlink" title="&lt;textarea&gt;表单元素"></a>&lt;textarea&gt;表单元素</h5><p><code>&lt;textarea&gt;</code> 标签是用于定义<strong>多行文本</strong>输入的控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p><code>cols=&quot;每行中的字符数&quot;</code>，<code>rows=&quot;显示的行数&quot;</code>，实际开发中使用CSS 来改变大小</p></li><li><p>如果要禁止拉伸文本框大小，则：<code>style=&quot;resize: none&quot; </code></p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo&amp;Github 搭建个人博客教程</title>
      <link href="/2022/02/27/Hexo&amp;Github/"/>
      <url>/2022/02/27/Hexo&amp;Github/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  <strong><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</strong></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>注册一个 GitHub 账号 <a class="btn-beautify blue" href="https://github.com/" title="前往注册"><i class="far fa-hand-point-right"></i><span>前往注册</span></a></li><li>安装 Git <a class="btn-beautify blue" href="https://git-scm.com/download" title="前往下载"><i class="far fa-hand-point-right"></i><span>前往下载</span></a></li><li>安装 node.js <a class="btn-beautify blue" href="https://nodejs.org/zh-cn/download/" title="前往下载"><i class="far fa-hand-point-right"></i><span>前往下载</span></a></li></ul><div class="note info no-icon flat"><p><strong>验证安装</strong> <code>CMD 命令行下执行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line"><span class="comment">#   git version 2.34.1.windows.1  提示Git版本信息安装成功</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm version</span><br><span class="line"><span class="comment">#   &#123;  npm: &#x27;8.1.2&#x27;,...&#125;   提示npm版本信息安装成功</span></span><br></pre></td></tr></table></figure></div><div class="note success flat"><p>为方便操作接下来的操作均在 <strong><code>Git Bash</code></strong> 下执行</p></div><hr><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><ul><li><h2 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h2><div class="note info no-icon flat"><p><strong>安装Hexo框架</strong> - <strong><a href="https://hexo.io/zh-cn/">Hexo官网</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line"><span class="comment"># 查看hexo版本验证安装</span></span><br></pre></td></tr></table></figure></div></li><li><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>进入到你要存放博客静态文件的目录下 使用<code>Git Bash</code> 输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog      <span class="comment"># 在当前位置创建blog文件夹【此文件夹就是你博客静态文件的根文件夹，需要重置等操作删除此文件夹即可】</span></span><br><span class="line"><span class="built_in">cd</span> blog                <span class="comment"># 进入blog文件夹</span></span><br><span class="line">npm install         <span class="comment"># 安装hexo所需文件</span></span><br></pre></td></tr></table></figure></li><li><p>初始化完成后[blog]文件夹下会有如下文件</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li><strong><code>_config.yml</code>: 博客的配置文件</strong> - 博客的基础设置在这里修改</li></ul></li><li><h2 id="启动Hexo服务"><a href="#启动Hexo服务" class="headerlink" title="启动Hexo服务"></a>启动Hexo服务</h2><p><code>Git Bash</code>在&#x2F;Blog路径下输入 <strong>hexo三连</strong>    [修改完配置文件后需要执行此操作]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl      <span class="comment"># 清除数据</span></span><br><span class="line">hexo g      <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo s      <span class="comment"># 启动服务 默认为4000端口  [-p]指定启动端口</span></span><br></pre></td></tr></table></figure><p>服务启动完成后在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到博客页面了 👍<br><img src="https://s2.loli.net/2022/02/27/lik5gqQtrHKeLXp.png" alt="20220227213149.png"><br>到此本地博客就搭建完成了.使用<code>ctrl+c</code>可以把服务关掉。</p></li></ul><hr><h1 id="部署GitHub"><a href="#部署GitHub" class="headerlink" title="部署GitHub"></a>部署GitHub</h1><ul><li><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><ol><li><p>登录GitHub新建仓库<br><img src="https://s2.loli.net/2022/02/27/kr75xbmuZoPazTU.png"></p></li><li><p>设置仓库基本信息<br>仓库名字 <code>用户名.github.io</code> 描述可填可不填 其余保持默认<br><img src="https://s2.loli.net/2022/02/27/HgUPSq2fdQMtaXN.png"></p></li><li><p>点击  <mark class="hl-label green">Create-repository</mark>  创建仓库</p></li></ol></li><li><h2 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h2><ul><li><p><strong>设置Git的user name和email</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [用户名]</span><br><span class="line">git config --global user.email [邮箱]</span><br></pre></td></tr></table></figure></li><li><p><strong>生成密钥</strong></p></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C [邮箱]</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意：这里-C这个参数是大写的C</mark>   <div class="note blue no-icon flat"><p><strong>执行命令后需要进行3次或4次确认：</strong></p><ol><li>确认秘钥的保存路径（如果不需要改路径则直接回车）；</li><li>如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；</li><li>创建密码（如果不需要密码则直接回车）；</li><li>确认密码；</li></ol></div><ul><li><p><strong>查看id_rsa.pub 文件内容</strong></p><ul><li>默认保存在用户家目录 .ssh 目录下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>添加 SSH Key</strong></p><div class="note blue no-icon flat"><p>复制 id_rsa.pub 文件内容<br>登录 GitHub，点击<code>用户头像</code> → <code>Settings→SSH and GPG keys</code> → <code>New SSH Key</code><br>输入密钥内容、备注Title → 点击<code>Add SSH key</code>保存</p></div></li><li><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p>  <strong>你将会看到：</strong><br>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (<code>yes</code>&#x2F;no)?<br>  <strong>选择 <code>yes</code></strong></p><p>Hi <code>liujiazhou</code>! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>  <strong>如果看到Hi后面是你的用户名，就说明配置成功了。</strong>  </p></div></li><li><h2 id="推送远端"><a href="#推送远端" class="headerlink" title="推送远端"></a>推送远端</h2></li></ul><ol><li><strong>配置</strong><code>_config.yml</code>文件 <strong><code>deploy</code>部分</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:用户名/仓库名.git    <span class="comment"># 仓库地址</span></span><br><span class="line">  branch: master    <span class="comment">#仓库分支</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/28/Hnk5dcfW6LMZXC4.png"></li><li><strong>安装部署插件</strong>  <code>Git Bash</code>在&#x2F;Blog路径下输入<br>  安装后可以使用<code>hexo d</code>命令部署 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><strong>推送</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl   <span class="comment"># 清除数据</span></span><br><span class="line">hexo g    <span class="comment"># 生成静态页面</span></span><br><span class="line">hexo d    <span class="comment"># 将页面提交到Github仓库</span></span><br></pre></td></tr></table></figure><div class="note green no-icon flat"><p><strong>在完成上述步骤没有报错的情况下，恭喜你博客就部署成功了🎉🎉</strong><br><strong>在浏览器输入 <code>http://youname.github.io/</code> 访问你的博客吧~</strong></p></div></li></ol><hr><h1 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h1><ul><li><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><div class="note blue no-icon flat"><p><strong>Next主题</strong></p><ul><li>地址：<a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></li><li>帮助文档：<a href="https://theme-next.iissnan.com/">https://theme-next.iissnan.com/</a></li></ul><p><strong>Butterfly主题</strong></p><ul><li>地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></li><li>帮助文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li></ul></div><strong>主题安装</strong></li></ul><p>这里以Next主题为例</p><ol><li>下载主题<br><code>Git Bash</code>在&#x2F;Blog路径下输入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></li><li>修改<code>_config.yml</code>文件 <strong><code>theme</code></strong> 部分<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape  修改为👉 theme: next</span><br></pre></td></tr></table></figure>  3.<strong>输入<code>hexo三连</code></strong> 即可看到效果<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/28/sAZk5noWdEhireB.png"><br><em>其他主题配置方法相同</em></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>因为Hexo 使用 Markdown 解析文章，所以Hexo编写文章也采用 <code>Markdown</code> 格式。<br>在博客根目录下使用命令快速创建文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&#x27;文章名&#x27;</span></span><br></pre></td></tr></table></figure><p>会在 <strong><code>/blog/source/_posts</code></strong> 文件夹下生成<code>.md</code>后缀的文件，也可以手动创建。</p><ul><li>Markdown文件头部需有如下参数，用 <strong><code>---</code></strong> 分隔区域  (<em>使用hexo new命令会帮我们自动生成)</em><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 新建文章       # 文章标题 【必需】 </span><br><span class="line"><span class="section">date: 2022-02-28 23:54:46       # 文章创建日期【必需】</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">文章内容</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">...</span><br><span class="line">文章内容</span><br></pre></td></tr></table></figure></li></ul></li><li><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>购买一个<strong>域名</strong>然后进入 <strong><code>域名解析</code></strong> 页面（这里用<a href="https://www.aliyun.com/">阿里云</a>作为演示）</p><ol><li>把默认的解析给删除掉，添加一条新的解析<img src="https://s2.loli.net/2022/03/01/ekadpQH4PbBx8Sw.png" width="80%">        </li><li>在博客目录source文件夹里新建一个 <strong><code>CNAME</code></strong> 的文件（<code>！注意文件没有后缀</code>）</li><li>将刚才解析的域名保存在里面(<code>格式：xxxx.com</code>)</li><li>重新生成部署到GitHub上，稍等片刻，在浏览器中输入我们的域名。访问成功！（原本.github.io域名也可以访问）</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git&amp;GitHub 学习笔记</title>
      <link href="/2022/02/08/Git&amp;GitHUB/"/>
      <url>/2022/02/08/Git&amp;GitHUB/</url>
      
        <content type="html"><![CDATA[<div class="note blue no-icon flat"><p>参考视频：【尚硅谷】<a href="https://www.youtube.com/watch?v=4UJnidp4lSE&list=PLmOn9nNkQxJFISyrvKUk8OWg-Pzs1donX">版本控制工具Git &amp; Github教程</a></p></div><p><img src="https://s2.loli.net/2022/02/08/6pQWYL8db2DtHcr.png"></p><h1 id="版本控制简介"><a href="#版本控制简介" class="headerlink" title="版本控制简介"></a>版本控制简介</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>工程设计领域中使用版本控制管理工程蓝图的设计过程。在 IT 开发过程中也可以使用版本控制思想管理代码的版本迭代。</li></ul><h2 id="版本控制工具应该具备的功能"><a href="#版本控制工具应该具备的功能" class="headerlink" title="版本控制工具应该具备的功能"></a>版本控制工具应该具备的功能</h2> <div class="note blue no-icon flat"><ul><li><strong>协同修改</strong><ul><li>多人并行不悖的修改服务器端的同一个文件。</li></ul></li><li><strong>数据备份</strong><ul><li>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。</li></ul></li><li><strong>版本管理</strong><ul><li>在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方面 SVN 采用的是增量式管理的方式，而 Git 采取了文件系统快照的方式。</li></ul></li><li><strong>权限控制</strong><ul><li>对团队中参与开发的人员进行权限控制。</li><li>对团队外开发者贡献的代码进行审核——<strong>Git 独有</strong>。</li></ul></li><li><strong>历史记录</strong><ul><li>查看修改人、修改时间、修改内容、日志信息。</li><li>将本地文件恢复到某一个历史状态。</li></ul></li><li><strong>分支管理</strong><ul><li>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</li></ul></li></ul></div><h2 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h2><ul><li><p>思想：版本控制 👉 实现：版本控制工具  </p></li><li><p>集中式版本控制工具：CVS、<mark class="hl-label blue">SVN</mark> 、VSS……</p></li></ul><p><img src="https://s2.loli.net/2022/02/08/YJmPk1Xfp9BSsvt.png"></p><ul><li>分布式版本控制工具：<mark class="hl-label blue">Git</mark> 、Mercurial、Bazaar、Darcs……<br><img src="https://s2.loli.net/2022/02/08/IDmwO4AaV5jN2Q7.png"></li></ul><hr><h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><div class="note blue no-icon flat"><p>Git官网（下载）地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p></div><p><img src="https://s2.loli.net/2022/02/08/JYs1nBFq2yMVXh8.jpg"></p><h2 id="Git简史"><a href="#Git简史" class="headerlink" title="Git简史"></a>Git简史</h2><p><img src="https://s2.loli.net/2022/02/08/Iq93FHORe4Exvyd.png"></p><h2 id="Git-的优势"><a href="#Git-的优势" class="headerlink" title="Git 的优势"></a>Git 的优势</h2><div class="note blue no-icon flat"><ul><li>大部分操作在本地完成，不需要联网</li><li>完整性保证</li><li>尽可能添加数据而不是删除或修改数据</li><li>分支操作非常快捷流畅</li><li>与 Linux 命令全面兼容</li></ul></div><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><div class="fj-gallery"><p><img src="https://s2.loli.net/2022/02/08/9wp1JRYb47gFMl6.png"><br><img src="https://s2.loli.net/2022/02/08/spICBFrMnRqzPWg.png"><br><img src="https://s2.loli.net/2022/02/08/t8rOUpSfHJ9dA5K.png"><br><img src="https://s2.loli.net/2022/02/08/LZ4sRC3HeODFnVg.png"><br><img src="https://s2.loli.net/2022/02/08/mXdEhDYzor2aHUN.png"><br><img src="https://s2.loli.net/2022/02/08/5QhfHPJsNM9tz3v.png"><br><img src="https://s2.loli.net/2022/02/08/Yd49CayX5p3JhgZ.png"><br><img src="https://s2.loli.net/2022/02/08/hdU4pRlfm3zxoSN.png"><br><img src="https://s2.loli.net/2022/02/08/eD3zowJkMyxZjfq.png"></p>          </div><h2 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h2><p><img src="https://s2.loli.net/2022/02/08/M7Ri6rNG4AIjEHY.png"></p><h2 id="Git-和代码托管中心"><a href="#Git-和代码托管中心" class="headerlink" title="Git 和代码托管中心"></a>Git 和代码托管中心</h2><div class="note blue no-icon flat"><ul><li><strong>代码托管中心的任务</strong>：维护远程库</li><li><strong>局域网环境下</strong>： GitLab 服务器</li><li><strong>外网环境下</strong>：<a href="https://github.com/">GitHub</a>、<a href="https://gitee.com/">码云（Gitee）</a></li></ul></div><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><h3 id="团队内部协作"><a href="#团队内部协作" class="headerlink" title="团队内部协作"></a>团队内部协作</h3><p><img src="https://s2.loli.net/2022/02/08/QtKO6yilFZNkVad.png"></p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><img src="https://s2.loli.net/2022/02/08/F4zvfdyANTOWR8U.png"></p><h1 id="Git命令操作"><a href="#Git命令操作" class="headerlink" title="Git命令操作"></a>Git命令操作</h1><h2 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/08/1XwYIiz5E9lkSjQ.png"></p><ul><li><strong>注意：</strong><ul><li>执行命令后会在项目地址中创建.git 目录</li><li>.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。</li></ul></li></ul><h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><div class="note blue no-icon flat"><p>用户名：tom<br>Email 地址：<a href="mailto:&#103;&#x6f;&#111;&#100;&#x4d;&#111;&#114;&#110;&#x69;&#x6e;&#103;&#x40;&#x61;&#x74;&#103;&#x75;&#105;&#x67;&#117;&#x2e;&#99;&#x6f;&#109;">&#103;&#x6f;&#111;&#100;&#x4d;&#111;&#114;&#110;&#x69;&#x6e;&#103;&#x40;&#x61;&#x74;&#103;&#x75;&#105;&#x67;&#117;&#x2e;&#99;&#x6f;&#109;</a></p><ul><li>作用：区分不同开发人员的身份</li><li>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系</li></ul></div><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>项目级别&#x2F;仓库级别</strong>：仅在当前本地库范围内有效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name tom_pro</span><br><span class="line">git config user.email goodMorning_pro@atguigu.com</span><br></pre></td></tr></table></figure><ul><li><strong>信息保存位置</strong>：.&#x2F;.git&#x2F;config 文件<br><img src="https://s2.loli.net/2022/02/09/NwxGC7XeM1YQoKy.png"></li></ul><p><strong>系统用户级别</strong>：登录当前操作系统的用户范围</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name tom_glb</span><br><span class="line">git config --global user.email goodMorning_pro@atguigu.com</span><br></pre></td></tr></table></figure><ul><li><strong>信息保存位置</strong>：~&#x2F;.gitconfig 文件<br><img src="https://s2.loli.net/2022/02/09/cvM6e5rhNHnlbq4.png"></li></ul><div class="note blue no-icon flat"><p><strong>级别优先级</strong></p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul></div><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="状态查看"><a href="#状态查看" class="headerlink" title="状态查看"></a>状态查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"><span class="comment"># 查看工作区、暂存区状态</span></span><br></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add [file name]</span><br><span class="line"><span class="comment"># 将工作区的“新建/修改”添加到暂存区</span></span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span> [file name]</span><br><span class="line"><span class="comment"># 将暂存区的内容提交到本地库</span></span><br></pre></td></tr></table></figure><h3 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h3><div class="tabs" id="历史记录"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#历史记录-1">git reflog(常用)</button></li><li class="tab"><button type="button" data-href="#历史记录-2">git log</button></li><li class="tab"><button type="button" data-href="#历史记录-3">git log --pretty=oneline</button></li><li class="tab"><button type="button" data-href="#历史记录-4">git log --oneline</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="历史记录-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/dfUNcTXBSK9DIue.png"></p><div class="note blue no-icon flat"><p>HEAD@{移动到当前版本需要多少步}</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="历史记录-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/XrsviQ3nufAHcwG.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="历史记录-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/yXcjgUdkVqFvKYJ.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="历史记录-4"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/iaUpDbmKtX9hrFl.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="版本前进后退"><a href="#版本前进后退" class="headerlink" title="版本前进后退"></a>版本前进后退</h3><p><strong>本质就是HEAD指针的移动</strong></p><div class="tabs" id="版本前进后退"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#版本前进后退-1">基于索引值操作[推荐]</button></li><li class="tab"><button type="button" data-href="#版本前进后退-2">使用^符号：只能后退</button></li><li class="tab"><button type="button" data-href="#版本前进后退-3">使用~符号：只能后退</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="版本前进后退-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [局部索引值]</span><br><span class="line"><span class="comment"># 例 git reset --hard a6ace91</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="版本前进后退-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br><span class="line"><span class="comment"># 注：一个^表示后退一步，n 个表示后退 n 步</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="版本前进后退-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~n</span><br><span class="line"><span class="comment"># 注：表示后退 n 步</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="reset命令的三个参数对比"><a href="#reset命令的三个参数对比" class="headerlink" title="reset命令的三个参数对比"></a>reset命令的三个参数对比</h3><div class="note blue no-icon flat"><ul><li><strong>–hard 参数</strong><ul><li>在本地库移动 HEAD 指针</li><li>重置暂存区</li><li>重置工作区</li></ul></li></ul></div><div class="note blue no-icon flat"><ul><li><strong>–mixed 参数</strong><ul><li>在本地库移动 HEAD 指针</li><li>重置暂存区</li></ul></li></ul></div><div class="note blue no-icon flat"><ul><li><strong>–soft 参数</strong><ul><li>仅仅在本地库移动 HEAD 指针</li></ul></li></ul></div><h3 id="删除文件并找回"><a href="#删除文件并找回" class="headerlink" title="删除文件并找回"></a>删除文件并找回</h3><div class="note red no-icon flat"><p>前提：删除前，文件存在时的状态提交到了本地库。</p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [指针位置]</span><br><span class="line"><span class="comment"># 删除操作已经提交到本地库：指针位置指向历史记录</span></span><br><span class="line"><span class="comment"># 删除操作尚未提交到本地库：指针位置使用 HEAD</span></span><br></pre></td></tr></table></figure><h3 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff [文件名]</span><br><span class="line"><span class="comment"># 将工作区中的文件和暂存区进行比较</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff [本地库中历史版本] [文件名]</span><br><span class="line"><span class="comment"># 将工作区中的文件和本地库历史记录比较</span></span><br><span class="line"><span class="comment"># 不带文件名比较多个文件</span></span><br></pre></td></tr></table></figure><hr><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><div class="note blue no-icon flat"><ul><li><strong>什么是分支</strong><ul><li>在版本控制过程中，使用多条线同时推进多个任务。</li></ul></li><li><strong>分支的好处？</strong><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul></li></ul></div><p><img src="https://s2.loli.net/2022/02/14/3KqlnoYgHOf5ysb.png"></p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [分支名]</span><br></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [分支名]</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ul><li><strong>第一步：切换到接受修改的分支（被合并，增加新内容）上</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout [被合并分支名]</span><br></pre></td></tr></table></figure></li><li><strong>第二步：执行 merge 命令</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [有新内容分支名]</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [分支名]</span><br></pre></td></tr></table></figure><h4 id="分支合并冲突"><a href="#分支合并冲突" class="headerlink" title="分支合并冲突"></a>分支合并冲突</h4><h5 id="冲突的表现"><a href="#冲突的表现" class="headerlink" title="冲突的表现"></a>冲突的表现</h5><p><img src="https://s2.loli.net/2022/02/14/Wj6L2J3qpsGcU1m.png"></p><h5 id="冲突的解决"><a href="#冲突的解决" class="headerlink" title="冲突的解决"></a>冲突的解决</h5><ul><li>第一步：编辑文件，删除特殊符号</li><li>第二步：把文件修改到满意的程度，保存退出</li><li>第三步：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名]</span><br></pre></td></tr></table></figure></li><li>第四步：<mark class="hl-label red">注意:此时commit一定不能带具体文件</mark> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;日志信息&quot;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="git基本原理"><a href="#git基本原理" class="headerlink" title="git基本原理"></a>git基本原理</h1><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><div class="note blue no-icon flat"><p><strong>明文 👉 加密算法 👉 密文</strong>  </p><p><strong>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点：</strong><br>①不管输入数据的数据量有多大，输入同一个哈希算法，得到的<code>加密结果长度固定</code>。<br>②哈希算法确定，输入数据确定，输出数据能够保证<code>不变</code><br>③哈希算法确定，输入数据<code>有变化</code>，输出数据一定<code>有变化</code>，而且通常变化很大<br>④哈希算法<code>不可逆</code></p></div><div class="note blue no-icon flat"><p><strong>Git 底层采用的是 SHA-1 算法。</strong><br>哈希算法可以被用来验证文件。原理如下图所示：</p></div><p><img src="https://s2.loli.net/2022/02/14/vcnafLtSjiyBgN1.png"></p><mark class="hl-label blue">Git就是靠这种机制来从根本上保证数据完整性的。</mark> <h2 id="Git-保存版本的机制"><a href="#Git-保存版本的机制" class="headerlink" title="Git 保存版本的机制"></a>Git 保存版本的机制</h2><h3 id="集中式版本控制工具的文件管理机制"><a href="#集中式版本控制工具的文件管理机制" class="headerlink" title="集中式版本控制工具的文件管理机制"></a>集中式版本控制工具的文件管理机制</h3><ul><li><strong>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</strong></li></ul><p><img src="https://s2.loli.net/2022/02/14/BP45xH76sZutpjK.png"></p><h3 id="Git-的文件管理机制"><a href="#Git-的文件管理机制" class="headerlink" title="Git 的文件管理机制"></a>Git 的文件管理机制</h3><ul><li><strong>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流。</strong></li></ul><p><img src="https://s2.loli.net/2022/02/14/okDKAF2qQOJgHRB.png"></p><hr><h2 id="Git-文件管理机制细节"><a href="#Git-文件管理机制细节" class="headerlink" title="Git 文件管理机制细节"></a>Git 文件管理机制细节</h2><h3 id="Git-的“提交对象”"><a href="#Git-的“提交对象”" class="headerlink" title="Git 的“提交对象”"></a>Git 的“提交对象”</h3><p><img src="https://s2.loli.net/2022/02/14/yU9QALXibaZ8dct.png"></p><h3 id="提交对象及其父对象形成的链条"><a href="#提交对象及其父对象形成的链条" class="headerlink" title="提交对象及其父对象形成的链条"></a>提交对象及其父对象形成的链条</h3><p><img src="https://s2.loli.net/2022/02/14/EU6djluIDfBb95t.png"></p><h2 id="Git-分支管理机制"><a href="#Git-分支管理机制" class="headerlink" title="Git 分支管理机制"></a>Git 分支管理机制</h2><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><p><img src="https://s2.loli.net/2022/02/14/X8S6VNDCMtyG2cp.png"></p><h3 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h3><p><img src="https://s2.loli.net/2022/02/14/NSoxatfkicuwbjZ.png"><br><img src="https://s2.loli.net/2022/02/14/CA6NIxpg8bnSVy2.png"><br><img src="https://s2.loli.net/2022/02/14/yWBGRFuUkbngwP1.png"><br><img src="https://s2.loli.net/2022/02/14/NRMlYUtnrDIPh7E.png"></p><hr><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><strong><a href="https://github.com/">https://github.com/</a></strong></p><h2 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h2><p><img src="https://s2.loli.net/2022/02/14/P5z4w8AU2BIgJNs.png"><br><img src="https://s2.loli.net/2022/02/14/6jsKHPMtJLu278p.png"></p><h2 id="创建远程仓库地址别名"><a href="#创建远程仓库地址别名" class="headerlink" title="创建远程仓库地址别名"></a>创建远程仓库地址别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [别名] [远程地址]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v </span><br><span class="line"><span class="comment"># 查看当前所有远程地址别名</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/14/EqcXQaDnghbVdeT.png"></p><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [别名] [分支名]</span><br></pre></td></tr></table></figure><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [远程地址]</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> &lt;-b 分支名&gt; [远程地址] &lt;本地目录名&gt;</span><br><span class="line"><span class="comment"># &lt;&gt;表示可选，默认克隆master分支，本地目录名称与版本库同名。</span></span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p><strong>效果</strong></p><ul><li>完整的把远程库下载到本地</li><li>创建 origin 远程地址别名</li><li>初始化本地库  无需<code>git init</code></li></ul></div><h2 id="团队成员邀请"><a href="#团队成员邀请" class="headerlink" title="团队成员邀请"></a>团队成员邀请</h2><p><img src="https://s2.loli.net/2022/02/14/eHdi72PCEDhWofx.png"></p><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程库地址别名] [远程分支名]</span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p><strong>pull&#x3D;fetch+merge</strong><br> git fetch [远程库地址别名] [远程分支名]<br> git merge [远程库地址别名&#x2F;远程分支名]</p></div><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><div class="note blue no-icon flat"><ul><li><strong>如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。</strong></li><li><strong>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。</strong></li></ul></div><h2 id="跨团队协作-1"><a href="#跨团队协作-1" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><div class="hide-toggle"><div class="hide-button toggle-title" style><i class="fas fa-caret-right fa-fw"></i><span>点击打开</span></div>    <div class="hide-content"><p><strong>Forl</strong><br><img src="https://s2.loli.net/2022/02/14/XRCHNireDAESqPp.png"><br><img src="https://s2.loli.net/2022/02/14/wOGAyKZrE8xVqFX.png"></p><p><strong>本地修改，然后推送到远程</strong><br><strong>Pull Request</strong><br><img src="https://s2.loli.net/2022/02/14/BCkoQZ3F4EbPXxw.png"><br><img src="https://s2.loli.net/2022/02/14/vIOKQcE8GUXeuTk.png"></p><p><strong>对话</strong><br><img src="https://s2.loli.net/2022/02/14/Wz95d1I6X73MagY.png"><br><img src="https://s2.loli.net/2022/02/14/WSw9HFEgr1nD2Zi.png"></p><p><strong>代码审核</strong><br><img src="https://s2.loli.net/2022/02/14/YKvoZHRVm9WJOlh.png"></p><p><strong>合并代码</strong><br><img src="https://s2.loli.net/2022/02/14/zi6hmgkNMwuXtdQ.png"><br><img src="https://s2.loli.net/2022/02/14/vjaGEDKneqUX31m.png"></p><p> <strong>将远程库修改拉取到本地</strong></p></div></div><h2 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h2><ul><li><p><strong>若首次使用先设置Git的user name和email</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [用户名]</span><br><span class="line">git config --global user.email [邮箱]</span><br></pre></td></tr></table></figure></li><li><p><strong>生成密钥</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C [邮箱]</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意：这里-C这个参数是大写的C</mark> <div class="note blue no-icon flat"><p><strong>执行命令后需要进行3次或4次确认：</strong></p><ol><li>确认秘钥的保存路径（如果不需要改路径则直接回车）；</li><li>如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；</li><li>创建密码（如果不需要密码则直接回车）；</li><li>确认密码；</li></ol></div></li><li><p><strong>查看id_rsa.pub 文件内容</strong></p><ul><li>默认保存在用户家目录 .ssh 目录下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>添加 SSH Key</strong></p><div class="note blue no-icon flat"><p>复制 id_rsa.pub 文件内容<br>登录 GitHub，点击<code>用户头像</code> → <code>Settings→SSH and GPG keys</code> → <code>New SSH Key</code><br>输入密钥内容、备注Title → 点击<code>Add SSH key</code>保存</p></div></li><li><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p>  <strong>你将会看到：</strong><br>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (<code>yes</code>&#x2F;no)?<br>  <strong>选择 <code>yes</code></strong></p><p>Hi <code>liujiazhou</code>! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>  <strong>如果看到Hi后面是你的用户名，就说明配置成功了。</strong>  </p></div></li><li><p><strong>SSH 推送</strong><br>回到 Git bash 创建远程地址别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin_ssh [SSH远程地址]</span><br></pre></td></tr></table></figure><p>推送文件进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin_ssh [分支名]</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/01/hello-world/"/>
      <url>/2022/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
